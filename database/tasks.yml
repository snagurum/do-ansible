---
- hosts: "db-servers"
  vars:
     state: "present"
     debug: false
     postgresql_version: "12"
     postgresql_conf_dir: "/etc/postgresql/{{ postgresql_version }}/main"
     db:
        name: "hello"
        user: "hello"
        password: "hello"

  tasks:
     - name: Install packages
       ansible.builtin.apt:
          name:
             - postgresql
             - postgresql-contrib
             - libpq-dev
             - python3-psycopg2
          state: "{{ state }}"

#     - name: Check if PostgreSQL is initialized
#       ansible.builtin.stat:
#          path: "{{ postgresql_data_dir }}/pg_hba.conf"
#       register: postgres_data

#     - name: Empty data dir
#       ansible.builtin.file:
#          path: "{{ postgresql_data_dir }}"
#          state: absent
#       when: not postgres_data.stat.exists

#     - name: Initialize PostgreSQL
#       ansible.builtin.shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
#       become: true
#       become_user: postgres
#       when: not postgres_data.stat.exists

     - name: "Configure(postgresql.conf) Open DB for External connection"
       ansible.builtin.lineinfile:
          path: "{{postgresql_conf_dir}}/postgresql.conf"
          search_string: "#listen_addresses = 'localhost'         # what IP address(es) to listen on;"
          line: "listen_addresses = '*'"
          owner: postgres
          group: postgres
          mode: '0644'
       register: output1
#       notify: "restart postgres"

     - name: "show output1"
       ansible.builtin.debug:
          msg: "output1 = {{ output1 }}"
       when: debug

     - name: "Configure(pg_hba.conf)Open DB for External connection"
       ansible.builtin.lineinfile:
          path: "{{postgresql_conf_dir}}/pg_hba.conf"
          search_string: "host    all             all             127.0.0.1/32            md5"
          line: "host    all             all             0.0.0.0/0               md5"
          owner: postgres
          group: postgres
          mode: '0644'
       register: output2
#       notify: "restart postgres"

     - name: "show output2"
       ansible.builtin.debug:
          msg: "output2 = {{ output2 }}"
       when: debug

     - name: Start and enable service
       ansible.builtin.service:
          name: postgresql
          state: restarted
          enabled: true
       when: output1.changed or output2.changed

     - name: "Create app database"
       ansible.builtin.postgresql_db:
          state: present
          name: "{{ db.name }}"
       become: yes
       become_user: postgres

     - name: "Create db user"
       ansible.builtin.postgresql_user:
          state: present
          name: "{{ db.user }}"
          password: "{{ db.password }}"
       become: yes
       become_user: postgres

     - name: "Grant db user access to app db"
       ansible.builtin.postgresql_privs:
          type: database
          database: "{{ db.name }}"
          roles: "{{ db.user }}"
          grant_option: no
          privs: all
       become: yes
       become_user: postgres

#  handlers:
#     - name: restart postgres
#       service: name=postgresql state=restarted
